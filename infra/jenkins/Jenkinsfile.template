pipeline {
    agent any
    
    environment {
        // 项目配置
        PROJECT_NAME = 'banyumall'
        REGISTRY = 'banyumall'
        
        // 服务配置
        SERVICES = ['service-auth', 'service-user', 'service-gateway']
        
        // 环境配置
        DEV_NAMESPACE = 'banyumall-dev'
        STAGING_NAMESPACE = 'banyumall-staging'
        PROD_NAMESPACE = 'banyumall-prod'
        
        // 版本配置
        VERSION = "${env.BUILD_NUMBER}"
        BRANCH_NAME = "${env.BRANCH_NAME}"
    }
    
    parameters {
        choice(
            name: 'DEPLOY_ENV',
            choices: ['dev', 'staging', 'prod'],
            description: '选择部署环境'
        )
        choice(
            name: 'SERVICE_NAME',
            choices: ['all', 'service-auth', 'service-user', 'service-gateway'],
            description: '选择要部署的服务'
        )
        string(
            name: 'CUSTOM_VERSION',
            defaultValue: '',
            description: '自定义版本号（可选）'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // 检出代码
                    checkout scm
                    
                    // 设置版本号
                    if (params.CUSTOM_VERSION) {
                        env.VERSION = params.CUSTOM_VERSION
                    }
                    
                    echo "构建版本: ${env.VERSION}"
                    echo "部署环境: ${params.DEPLOY_ENV}"
                    echo "目标服务: ${params.SERVICE_NAME}"
                }
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Build service-auth') {
                    when {
                        anyOf {
                            expression { params.SERVICE_NAME == 'all' }
                            expression { params.SERVICE_NAME == 'service-auth' }
                        }
                    }
                    steps {
                        script {
                            buildService('service-auth')
                        }
                    }
                }
                
                stage('Build service-user') {
                    when {
                        anyOf {
                            expression { params.SERVICE_NAME == 'all' }
                            expression { params.SERVICE_NAME == 'service-user' }
                        }
                    }
                    steps {
                        script {
                            buildService('service-user')
                        }
                    }
                }
                
                stage('Build service-gateway') {
                    when {
                        anyOf {
                            expression { params.SERVICE_NAME == 'all' }
                            expression { params.SERVICE_NAME == 'service-gateway' }
                        }
                    }
                    steps {
                        script {
                            buildService('service-gateway')
                        }
                    }
                }
            }
        }
        
        stage('Push Images') {
            steps {
                script {
                    // 推送镜像到仓库
                    if (params.SERVICE_NAME == 'all') {
                        for (service in SERVICES) {
                            pushImage(service)
                        }
                    } else {
                        pushImage(params.SERVICE_NAME)
                    }
                }
            }
        }
        
        stage('Deploy to K8s') {
            steps {
                script {
                    // 部署到Kubernetes
                    deployToK8s(params.DEPLOY_ENV, params.SERVICE_NAME)
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // 健康检查
                    healthCheck(params.DEPLOY_ENV, params.SERVICE_NAME)
                }
            }
        }
    }
    
    post {
        always {
            // 清理工作空间
            cleanWs()
        }
        
        success {
            script {
                echo "部署成功! 版本: ${env.VERSION}"
                // 可以添加通知逻辑，如钉钉、邮件等
            }
        }
        
        failure {
            script {
                echo "部署失败! 版本: ${env.VERSION}"
                // 可以添加失败通知逻辑
            }
        }
    }
}

// 构建服务函数
def buildService(serviceName) {
    echo "开始构建服务: ${serviceName}"
    
    // 使用Maven构建
    dir("service/${serviceName}") {
        sh """
            ./mvnw clean package -DskipTests
        """
    }
    
    // 构建Docker镜像
    sh """
        cd infra/docker
        ./build.sh ${serviceName} ${params.DEPLOY_ENV} ${env.VERSION}
    """
    
    echo "服务 ${serviceName} 构建完成"
}

// 推送镜像函数
def pushImage(serviceName) {
    echo "推送镜像: ${serviceName}"
    
    sh """
        cd infra/docker
        ./push.sh ${serviceName} ${env.VERSION}
    """
    
    echo "镜像 ${serviceName} 推送完成"
}

// 部署到K8s函数
def deployToK8s(environment, serviceName) {
    echo "部署到K8s环境: ${environment}"
    
    def namespace = getNamespace(environment)
    
    if (serviceName == 'all') {
        // 部署所有服务
        for (service in SERVICES) {
            deployService(service, namespace, environment)
        }
    } else {
        // 部署指定服务
        deployService(serviceName, namespace, environment)
    }
    
    echo "K8s部署完成"
}

// 部署单个服务
def deployService(serviceName, namespace, environment) {
    echo "部署服务: ${serviceName} 到命名空间: ${namespace}"
    
    sh """
        kubectl apply -f infra/k8s/${environment}/${serviceName}/
        kubectl rollout status deployment/${serviceName} -n ${namespace} --timeout=300s
    """
}

// 获取命名空间
def getNamespace(environment) {
    switch(environment) {
        case 'dev':
            return env.DEV_NAMESPACE
        case 'staging':
            return env.STAGING_NAMESPACE
        case 'prod':
            return env.PROD_NAMESPACE
        default:
            return env.DEV_NAMESPACE
    }
}

// 健康检查函数
def healthCheck(environment, serviceName) {
    echo "开始健康检查..."
    
    def namespace = getNamespace(environment)
    
    if (serviceName == 'all') {
        for (service in SERVICES) {
            checkServiceHealth(service, namespace)
        }
    } else {
        checkServiceHealth(serviceName, namespace)
    }
    
    echo "健康检查完成"
}

// 检查单个服务健康状态
def checkServiceHealth(serviceName, namespace) {
    echo "检查服务健康状态: ${serviceName}"
    
    sh """
        kubectl get pods -n ${namespace} -l app=${serviceName}
        kubectl get svc -n ${namespace} -l app=${serviceName}
    """
    
    // 等待服务就绪
    sh """
        kubectl wait --for=condition=ready pod -l app=${serviceName} -n ${namespace} --timeout=300s
    """
    
    echo "服务 ${serviceName} 健康检查通过"
} 